generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticaci√≥n local
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
  votes         Vote[]
  favorites     Favorite[]
  accounts      Account[]
  sessions      Session[]
}


model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id            String   @id @default(cuid()) @map("_id")
  title         String
  authors       Json?      
  thumbnailUrl  String?
  description   String?
  pageCount     Int?
  categories    Json?     
  publishedDate String?
  createdAt     DateTime @default(now())
  reviews       Review[]
  favorites     Favorite[]
}

model Review {
  id        String   @id @default(cuid()) @map("_id")
  bookId    String
  userId    String
  rating    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]
  @@unique([bookId, userId])
}

model Vote {
  id        String   @id @default(cuid()) @map("_id")
  reviewId  String
  userId    String
  value     Int
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([reviewId, userId])
}

model Favorite {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   
  bookId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookId])
}
