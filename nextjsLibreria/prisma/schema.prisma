generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_CONNECTION_STRING")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  reviews   Review[]
  votes     Vote[]
  accounts  Account[]
  sessions  Session[]
}

// NextAuth (PrismaAdapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Book {
  id            String   @id @default(cuid())
  title         String
  authors       Json?      
  thumbnailUrl  String?
  description   String?   @db.Text
  pageCount     Int?
  categories    Json?     
  publishedDate String?
  createdAt     DateTime @default(now())
  reviews       Review[]
}

model Review {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  rating    Int
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]
  @@unique([bookId, userId])
}

model Vote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  value     Int
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([reviewId, userId])
}
